name: Azure Security Audit Tool - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run secret detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
          
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript  # For any JS/JSON files
          
      - name: PowerShell Script Analyzer
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck
          $results = Invoke-ScriptAnalyzer -Path . -Recurse -Severity Warning,Error
          if ($results) {
            $results | ConvertTo-Json | Out-File pssa-results.json
            Write-Host "PSScriptAnalyzer found issues:"
            $results | Format-Table
            exit 1
          } else {
            Write-Host "No PSScriptAnalyzer issues found"
          }
          
      - name: Upload PSSA results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: pssa-results
          path: pssa-results.json

  # Unit Testing
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        powershell-version: ['7.2', '7.3', '7.4']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PowerShell ${{ matrix.powershell-version }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $PSVersionTable
          azPSVersion: "latest"
          
      - name: Install Pester
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -SkipPublisherCheck
          
      - name: Run Unit Tests
        shell: pwsh
        run: |
          ./tests/Test-Runner.ps1 -TestType Unit -OutputFormat JUnitXml -Coverage
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-ps${{ matrix.powershell-version }}
          path: |
            test-results/*.xml
            
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-ps${{ matrix.powershell-version }}
          path: test-results/coverage.xml
          
      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Tests (PowerShell ${{ matrix.powershell-version }})
          path: test-results/*.xml
          reporter: java-junit

  # Integration Testing (requires Azure credentials)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [security-scan, unit-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: integration-testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Setup PowerShell
        uses: azure/powershell@v1
        with:
          inlineScript: |
            # Install required modules
            Install-Module -Name Pester -Force -SkipPublisherCheck
            Import-Module Az
          azPSVersion: "latest"
          
      - name: Run Integration Tests
        shell: pwsh
        run: |
          ./tests/Test-Runner.ps1 -TestType Integration -OutputFormat JUnitXml
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/*.xml

  # Documentation and Examples Testing
  docs-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate Markdown
        uses: DavidAnson/markdownlint-action@v1
        with:
          files: '**/*.md'
          config: '.markdownlint.json'
          
      - name: Check links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          
      - name: Validate Examples
        shell: pwsh
        run: |
          # Syntax check all PowerShell examples
          Get-ChildItem -Path examples -Filter "*.ps1" -Recurse | ForEach-Object {
            Write-Host "Validating: $($_.FullName)"
            $errors = $null
            $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $_.FullName -Raw), [ref]$errors)
            if ($errors) {
              Write-Error "Syntax errors in $($_.FullName): $($errors | Out-String)"
              exit 1
            }
          }

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PowerShell
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Install-Module -Name PSBenchmark -Force -SkipPublisherCheck -ErrorAction SilentlyContinue
          azPSVersion: "latest"
          
      - name: Run Performance Tests
        shell: pwsh
        run: |
          # Mock performance tests - would require actual implementation
          Write-Host "Running performance baseline tests..."
          $startTime = Get-Date
          
          # Test module loading performance
          Measure-Command {
            . ./modules/core/auth.ps1
            . ./modules/core/reporting.ps1
            . ./modules/controls/iam.ps1
          } | ForEach-Object {
            Write-Host "Module loading time: $($_.TotalMilliseconds) ms"
            if ($_.TotalMilliseconds -gt 5000) {
              Write-Error "Module loading too slow: $($_.TotalMilliseconds) ms"
              exit 1
            }
          }

  # Build and Package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [security-scan, unit-tests, docs-validation]
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for versioning
          
      - name: Calculate version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="1.0.0-dev.$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Create distribution package
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $packageName = "azure-security-audit-tool-$version"
          
          # Create package directory
          New-Item -ItemType Directory -Path "dist/$packageName" -Force
          
          # Copy source files
          Copy-Item -Path "audit.ps1" -Destination "dist/$packageName/"
          Copy-Item -Path "modules" -Destination "dist/$packageName/" -Recurse
          Copy-Item -Path "config" -Destination "dist/$packageName/" -Recurse
          Copy-Item -Path "examples" -Destination "dist/$packageName/" -Recurse
          Copy-Item -Path "docs" -Destination "dist/$packageName/" -Recurse
          Copy-Item -Path "README.md" -Destination "dist/$packageName/"
          Copy-Item -Path "LICENSE" -Destination "dist/$packageName/"
          Copy-Item -Path "TERMS_OF_USE.md" -Destination "dist/$packageName/"
          Copy-Item -Path "PRIVACY_POLICY.md" -Destination "dist/$packageName/"
          
          # Create version file
          @{
            Version = $version
            BuildDate = (Get-Date -Format "o")
            GitCommit = "${{ github.sha }}"
            BuildNumber = "${{ github.run_number }}"
          } | ConvertTo-Json | Out-File "dist/$packageName/VERSION.json"
          
          # Create ZIP package
          Compress-Archive -Path "dist/$packageName" -DestinationPath "dist/$packageName.zip"
          
          # Create checksums
          Get-FileHash "dist/$packageName.zip" -Algorithm SHA256 | 
            Select-Object Hash, Path | 
            ConvertTo-Json | 
            Out-File "dist/$packageName.zip.sha256"
            
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution-package
          path: |
            dist/*.zip
            dist/*.sha256
            
      - name: Upload to release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/azure-security-audit-tool-${{ steps.version.outputs.version }}.zip
          asset_name: azure-security-audit-tool-${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip

  # Container Build (for advanced deployments)
  container-build:
    name: Container Build
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Deployment to staging/production
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: distribution-package
          
      - name: Deploy to staging environment
        run: |
          echo "Deploying version ${{ needs.build.outputs.version }} to staging"
          # Implementation would depend on staging infrastructure
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: distribution-package
          
      - name: Deploy to production
        run: |
          echo "Deploying version ${{ needs.build.outputs.version }} to production"
          # Implementation would depend on production infrastructure

  # Notifications
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [build, unit-tests, integration-tests]
    if: always()
    steps:
      - name: Notify on success
        if: needs.build.result == 'success' && needs.unit-tests.result == 'success'
        run: |
          echo "✅ Pipeline completed successfully!"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Pipeline failed. Check the logs for details."